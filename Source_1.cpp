// Передача объектов функциям (как параметров функции)

/*
#include <iostream>
#include <cstdlib>

using namespace std;

class myclass {
	int* p;
public:
	myclass(int i);
	~myclass();
	int getval() { return *p; }
};

myclass::myclass(int i)
{
	cout << "Выделение памяти, адресуемой указателем p.\n";
	p = new int;
	*p = i;
}

myclass::~myclass()
{
	cout << "Освобождение памяти, адресуемой указателем p.\n";
	delete p;
}

// выполнение следующей функции подразумевает возникновение проблемы! //

void display(myclass& ob) // создаётся копия класса myclass объекта a и копируется побитово в параметр ob. 
// если в аргументах функции указать (myclass &ob) то копии создаваться не будет. Поскольку обьект ob теперь передаётся по ссылке, а следовательно 
// обьект не выходит из области видимости(функции) по завершении.
{
	cout << ob.getval() << endl; 
}  // по завершении функции выполнится первый раз деструктор

int main()
{
	setlocale(LC_ALL, "ru");

	myclass a(10);  
	display(a);   // по завершении программы деструктор запустится вторично, что приведет к большим проблемам

	return 0;

}
*/